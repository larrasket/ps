#+TITLE: Data Structures and Algorithm Analysis by Clifford A. Shaffer, Answers Notebook
#+Description: Data Structures and Algorithm Analysis by Clifford A. Shaffer, Answers Notebook
#+hugo_tags: "Computer Science"
#+draft: true


* Table of Content :TOC_3:
- [[#not-completed-yet][Not COMPLETED (yet?)]]
- [[#introduction-04][Introduction]]
  - [[#16-data-structures--algorithms-exercises][[1.6] Data Structures & Algorithms Exercises]]
  - [[#29-mathematical-preliminaries-exercises][[2.9] Mathematical Preliminaries Exercises]]
  - [[#313-algorithm-analysis-exercises][[3.13] Algorithm Analysis Exercises]]
  - [[#314-algorithm-analysis-projects][[3.14] Algorithm Analysis Projects]]
- [[#applied][Applied]]
  - [[#46-lists-stacks-and-queues-exercises-720][4.6. Lists, Stacks, and Queues Exercises]]
    - [[#1][1.]]
    - [[#2][2.]]
    - [[#3][3.]]
    - [[#4][4.]]
    - [[#5][5.]]
    - [[#6][6.]]
    - [[#7][7.]]
    - [[#8][8.]]
    - [[#9][9.]]
    - [[#10][10.]]
    - [[#11][11.]]
    - [[#12][12.]]
    - [[#13][13.]]
    - [[#14][14.]]
    - [[#15][15.]]
    - [[#16][16.]]
    - [[#17][17.]]
    - [[#18][18.]]
    - [[#19][19.]]
    - [[#20][20.]]
  - [[#47-lists-stacks-and-queues-projects][4.7. Lists, Stacks, and Queues Projects]]
  - [[#58-binary-trees-exercises][5.8. Binary Trees Exercises]]
  - [[#59-binary-trees-projects][5.9. Binary Trees Projects]]
  - [[#67-non-binary-trees-exercises][6.7. Non-Binary Trees Exercises]]
  - [[#68-non-binary-trees-projects][6.8. Non-Binary Trees Projects]]
  - [[#711-internal-sorting-exercises][7.11. Internal Sorting Exercises]]
  - [[#712-internal-sorting-projects][7.12. Internal Sorting Projects]]
  - [[#87-file-processing-and-external-sorting-exercises][8.7. File Processing and External Sorting Exercises]]
  - [[#89-file-processing-and-external-sorting-projects][8.9. File Processing and External Sorting Projects]]
  - [[#96-searching-exercises][9.6. Searching Exercises]]
  - [[#97-searching-projects][9.7. Searching Projects]]
  - [[#107-indexing-exercises][10.7. Indexing Exercises]]
  - [[#108-indexing-projects][10.8. Indexing Projects]]
  - [[#117-graphs-exercises][11.7. Graphs Exercises]]
  - [[#118-graphs-projects][11.8. Graphs Projects]]
  - [[#125-lists-and-arrays-revisited-exercises][12.5. Lists and Arrays Revisited Exercises]]
  - [[#126-lists-and-arrays-revisited-projects][12.6. Lists and Arrays Revisited Projects]]
  - [[#135-advanced-tree-structures-exercises][13.5. Advanced Tree Structures Exercises]]
  - [[#136-advanced-tree-structures-projects][13.6. Advanced Tree Structures Projects]]
  - [[#145-analysis-techniques-exercises][14.5. Analysis Techniques Exercises]]
  - [[#146-analysis-techniques-projects][14.6. Analysis Techniques Projects]]
  - [[#159-lower-bounds-exercises][15.9. Lower Bounds Exercises]]
  - [[#1510-lower-bounds-projects][15.10. Lower Bounds Projects]]
  - [[#165-pattern-of-algorithms-exercises][16.5. Pattern of Algorithms Exercises]]
  - [[#166-pattern-of-algorithms-processing][16.6. Pattern of Algorithms Processing]]
  - [[#175-limited-to-computation-exercises][17.5. Limited to Computation Exercises]]
  - [[#176-limited-to-computation-projects][17.6. Limited to Computation Projects]]
- [[#to-solve-01][To Solve]]
  - [[#45][4.5]]

* Not COMPLETED (yet?)
* Introduction [0/4]
** TODO [1.6] Data Structures & Algorithms Exercises
** TODO [2.9] Mathematical Preliminaries Exercises
** TODO [3.13] Algorithm Analysis Exercises
** TODO [3.14] Algorithm Analysis Projects
* Applied
** TODO 4.6. Lists, Stacks, and Queues Exercises [7/20]
*** DONE 1.
         #+begin_src c++
         for (MyList.moveToStart(); MyList.currPos() < MyList.length();
              MyList.next()) {
           if (MyList.getValue() == 15)
             MyList.remove();
             break;
         }
         #+end_src
*** DONE 2.
   a. The current position is in the end of the list (tail).
   b. Current position is pointing to 39.
*** DONE 3.
      #+begin_src cpp
     ArrayList<int> MyList(20);
     MyList.append(2);
     MyList.append(23);
     MyList.append(15);
     MyList.append(5);
     MyList.append(9);
     MyList.moveToPos(2); // MyList is 0-indexed, so it points at 15.
      #+end_src
*** DONE 4.
     #+begin_src csharp
  // Extending Linked List Implementation
    void interchange() {
      assert(current != tail && count > 2);
      t temp = current->element; // remember current val
      current->element = current->next->element;
      current->next->element = temp;
    }
     #+end_src
*** TODO 5.
*** DONE 6.
#+begin_src c++
void reverse() {
  Link<t> *current = head, *prev = nullptr, *next = nullptr;
  head = tail;
  tail = current;
  while (current) {
    next = current->next;
    current->next = prev;
    prev = current;
    current = next;
  }
}
#+end_src
*** DONE 7.
#+begin_src c++
ListNode *mergeTwoLists(ListNode *list1, ListNode *list2) {
  ListNode usage(INT_MIN);
  ListNode *head = &usage;
  while (list1 && list2) {
    if (list1->val < list2->val) {
      head->next = list1;
      list1 = list1->next;
    } else {
      head->next = list2;
      list2 = list2->next;
    }
    head = head->next;
  }
  head->next = list1 ? list1 : list2;
  return usage.next;
}
#+end_src
*** DONE 8.
The solution is just to change the appending style, instead of the tail pointing to
~nullptr~ as next value, it will point to ~head~.
#+begin_src c++
//TODO
#+end_src
*** TODO 9.
*** TODO 10.
*** TODO 11.
*** TODO 12.
*** TODO 13.
*** TODO 14.
*** TODO 15.
*** TODO 16.
*** TODO 17.
*** TODO 18.
*** TODO 19.
*** TODO 20.


** TODO 4.7. Lists, Stacks, and Queues Projects
** TODO 5.8. Binary Trees Exercises
** TODO 5.9. Binary Trees Projects
** TODO 6.7. Non-Binary Trees Exercises
** TODO 6.8. Non-Binary Trees Projects
** TODO 7.11. Internal Sorting Exercises
** TODO 7.12. Internal Sorting Projects
** TODO 8.7. File Processing and External Sorting Exercises
** TODO 8.9. File Processing and External Sorting Projects
** TODO 9.6. Searching Exercises
** TODO 9.7. Searching Projects
** TODO 10.7. Indexing Exercises
** TODO 10.8. Indexing Projects
** TODO 11.7. Graphs Exercises
** TODO 11.8. Graphs Projects
** TODO 12.5. Lists and Arrays Revisited Exercises
** TODO 12.6. Lists and Arrays Revisited Projects
** TODO 13.5. Advanced Tree Structures Exercises
** TODO 13.6. Advanced Tree Structures Projects
** TODO 14.5. Analysis Techniques Exercises
** TODO 14.6. Analysis Techniques Projects
** TODO 15.9. Lower Bounds Exercises
** TODO 15.10. Lower Bounds Projects
** TODO 16.5. Pattern of Algorithms Exercises
** TODO 16.6. Pattern of Algorithms Processing
** TODO 17.5. Limited to Computation Exercises
** TODO 17.6. Limited to Computation Projects
* To Solve [0/1]
** TODO 4.5
