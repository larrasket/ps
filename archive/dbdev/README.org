#+title: Designing and Implementing SQL Server
#+DATE:  <2022-08-04>


* Database Sample
I'm going to use a sample database in some parts of this blob, please consider downloading [[file:create
objects.sql][create_object]] and [[file:load data.sql][load_data.sql]].
* TODO Tables

Before you create a table, you need to know a few things. First off, you need the name of
the database that will hold the table. If an RDBMS were a country, a database would be a
city. Next, you need the name of a schema within the database where the new table will live.
A schema is like a ~namespace~ as found in many programming languages.

Sticking with the country analogy, a schema name would be a district or borough within a
city. Note that even if you don't specify a schema name, your table will still live in a
special schema, the database owner schema, dbo for short. At the risk of sounding obvious,
you need a name for your new table. A table is not a table without columns, and every column
needs a name.

Every column also must have a data type. There are many available to fit various needs.
Finally, you need to think about any required constraints on the data that a column can
hold. You'll learn more about constraints later in this course. In this module, we'll look
at two of them. ~A PRIMARY KEY~ constraint is used to define the primary key which must be
unique over all the rows the table will hold. The nullability constraint indicates whether
it is acceptable for a column to ever have null value for some row. Since there are at least
four names required, let's see what SQL Server names can be.

** Identifier

All names of things in SQL Server should follow the four simple rules for regular
identifiers. First, they must begin with:

+ a letter,
  The letters are defined by the Unicode standard and include the alphabets of most languages.
+ an underscore,
+ an at sign,
  Please note that the at sign and the number sign have special meanings in Transact-SQL.
  Avoid these at the start of database object names.
+ or a number sign.

Second, after the first letter, identifiers may contain letters, numbers, and the
characters, the at sign, the dollar sign, the number sign, or the underscore.

Third, regular
identifiers must not be a Transact-SQL reserved word. This means names like database or
table or schema are excluded, as are other names such as key, value, date, and time.

Fourth, regular identifiers may not contain embedded spaces or special characters. In a way,
rule four is redundant since rule two covers these exclusions.

Practically, it is good to
have this spelled out since attempts to break this rule can lead to odd errors in code that
does not work as expected. Wait, did I say there were four rules. There're also a couple of
rules for exceptions. A special kind of identifier called a delimited identifier that breaks
any of the first four rules must be enclosed in brackets. And,
finally, though not often stated, an identifier cannot be longer than 128 characters.
Practically, that's quite enough. If you can't effectively name an object in 128 characters,
chances are you have bigger problems to solve.

** Conventions

It's a great idea to establish a naming convention for a database and even an entire
database system. There are several popular schemes in use. First, two things to avoid. Do
not use the at sign as the first character for a name since that is used to denote variable
names in Transact-SQL.

Also, do not use the number sign as the first character since that is used for naming
objects in tempdb. Here are a few of the most popular styles. Use a consistent style for
naming objects. CamelCase where identifiers use a capital letter for all words in a name,
underscore separated where the words are separated by, well, underscores, or maybe a hybrid
approach, which is basically like CamelCase but using underscores to eliminate ambiguity,
and, finally, at the risk of being too repetitive, do not use delimited identifiers

* Views


