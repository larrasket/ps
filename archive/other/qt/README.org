#+TITLE: Introduction to Qt5


* Table of Content :TOC_3:
- [[#stylesheet][~styleSheet~]]
  - [[#basic-style-sheet][Basic Style Sheet]]
- [[#event-handling][Event Handling]]
  - [[#signals--slots][Signals & Slots]]
  - [[#working-with-signals-and-slots][Working with Signals and Slots]]

* ~styleSheet~
First create your first project/app. Go to *File* from the menu bar, click next multiple
times until you find a new window with the ~mainwindow.cpp~ file to edit. Obviously this is
the file for the main window program, to begin with design you can double click at the
~mainwindow.ui~ file. This file, just as its name implies, contain instruction (which can be
put visually) about the main window in your application.

If you're doing that, then you should be seeing the design section popped up with the editor
gone. Try to add something to the window by dragging and putting it into the window. For my
case I will try with a *Push Button*, you should see something like this:

[[file:First_Style_Sheet/2022-04-06_10-29-16_screenshot.png]]

Now you will see all the properties of this button inside the Property Editor on the right
side of your window. Scroll down to the middle and look for a property called styleSheet.
This is where you apply styles to your widget, which may or may not inherit to its children
or grandchildren recursively, depending on how you set your style sheet. Alternatively, you
can right-click on any widget in your UI at the form editor and select Change styleSheet
from the pop-up menu.

You can click on the input field of the styleSheet property to directly write the
style sheet code, or click on the … button beside the input field to open up the
Edit Style Sheet window, which has a bigger space for writing longer code for
style sheets. At the top of the window, you can find several buttons, such as Add
Resource, Add Gradient, Add Color, and Add Font, that can help you to
kickstart your coding if you can't remember the properties' names. Let's try to do
some simple styling with the Edit Style Sheet window.

For exploring purpose, click add color and pick a random color, then click ok. this should
generate code like this one:

[[file:First_Style_Sheet/2022-04-06_10-34-45_screenshot.png]]


Although these methods works really well, most of the time, the person who is in
charge of designing the program's UI is not the programmer, but rather a UI designer who
specializes in designing user-friendly UI. In this case, it's better to let the UI designer design
the program's layout and style sheet with a different tool and not mess around with the
code. Qt provides an all-in-one editor called Qt Creator.

Qt Creator consists of several different tools, such as script editor, compiler, debugger,
profiler, and UI editor. The UI editor, which is also called Qt Designer, is the perfect tool
for designers to design their program's UI without writing any code. This is because Qt
Designer adopted the what you see is what you get approach by providing an accurate visual
representation of the final result, which means whatever you design with Qt Designer will
turn out exactly the same visually when the program is compiled and run


Qt Style Sheets also supports all the different types of selectors defined in the CSS2
standard, including the universal selector, type selector, class selector, and ID selector,
which allows us to apply styling to a very specific individual widget or group of widgets.
For instance, if we want to change the background color of a specific line-edit widget with
the ~usernameEdit~ object name, we can do this by using an ID selector to refer to it:

#+begin_src css
QLineEdit#usernameEdit { background-color: blue }
#+end_src

To learn about all the selectors available in CSS2 (which are also
supported by Qt Style Sheets), please refer to this document: [[http:/​/​www.w3.​org/​TR/​REC-​CSS2/​selector.​html]].
** Basic Style Sheet
Let's build a very basic style sheet to be used in this application:

1. Remove the style sheet from ~PushButton~ by selecting it and clicking the small arrow button beside the styleSheet property. This button will revert the property to the default value, which in this case is the empty style sheet.
2. Add a few more widgets to the UI by dragging them one by one from the Widget Box to the form editor. I've added a *line edit, combo box, radio button, and a check box.*
   [[file:~styleSheet~/2022-04-06_11-03-34_screenshot.png]]

3. For the sake of simplicity, delete the ~menuBar, mainToolBar~, and the ~statusBar~ from your UI by selecting them from the Object Inspector, right-click, and choose Remove.

4.  Select the main window from either the form editor or the Object Inspector, then right-click and choose Change ~styleSheet~ to open up the Edit Style Sheet window. Insert the following into the style sheet:
   #+begin_src css
border: 2px solid gray;
border-radius: 10px;
padding: 0 8px;
background: yellow;
  #+end_src

5. You will see a bizarre-looking UI with everything covered in yellow with a thick border.
   This is because the preceding style sheet does not have a selector, which means the style
   will apply to the children widgets of the main window all the way down the hierarchy. To
   change that, let's try something different:
   #+begin_src css
QPushButton {
border: 2px solid gray;
border-radius: 10px;
padding: 0 8px;
background: yellow;
}
   #+end_src

6. This time, only PushButton will get the style described in the preceding code, and all other widgets will return to the default styling. You can try to add a few more push buttons to your UI and they will all look the same:

7. This happens because we specifically tell the selector to apply the style to all the widgets with the QPushButton class. We can also apply the style to just one of the push buttons by mentioning its name in the style sheet, as in the following code:
   #+begin_src css
QPushButton#pushButton_3 {
border: 2px solid gray;
border-radius: 10px;
padding: 0 8px;
background: yellow;
   #+end_src

8. Once you understand this method, we can add the following code to the style sheet:
   #+begin_src css
QPushButton {
color: red;
border: 0px;
padding: 0 8px;
background: white;
}

QPushButton#pushButton_2 {
border: 1px solid red;
border-radius: 10px;
}
   #+end_src

9. This code basically changes the style of all the push buttons, as well as some properties of the pushButton_2 button. We keep the style sheet of pushButton_3 as it is. Now the buttons will look like this:

10. The first set of style sheets will change all widgets of the QPushButton type to a white rectangular button with no border and red text. The second set of style sheets changes only the border of a specific QPushButton widget called pushButton_2. Notice that the background color and text color of pushButton_2 remain white and red, respectively, because we didn't override them in the second set of style sheets, hence it will return to the style described in the first set of style sheets since it's applicable to all the QPushButton widgets. The text of the third button has also changed to red because we didn't describe the Color property in the third set of style sheets.

11. Create another set of style sheets that use the universal selector, using the following code:
    #+begin_src css
 *{
background: qradialgradient(cx: 0.3, cy: -0.4, fx: 0.3, fy:
-0.4, radius: 1.35, stop: 0 #fff, stop: 1 #888);
color: rgb(255, 255, 255);
border: 1px solid #ffffff;
}
    #+end_src

If you are ever involved in web development using HTML and CSS, Qt's style sheet works
exactly the same way as CSS. Style sheets provide the definitions to describe the
presentation of the widgets – what the colors are for each element in the widget group, how
thick the border should be, and so on and so forth. If you specify the name of the widget to
the style sheet, it will change the style of the particular PushButton widget with the name
you provide. None of the other widgets will be affected and will remain as the default
style.

To change the name of a widget, select the widget from either the form editor or the Object
Inspector and change the property called ~objectName~ in the property window. If you have used
the ID selector previously to change the style of the widget, changing its object name will
break the style sheet and lose the style. To fix this problem, simply change the object name
in the style sheet as well.
* Event Handling
The signals and slots mechanism in Qt 5 is one of its most important features. It's a method
that allows communication between objects, which is a crucial part of a program's graphical
user interface. A signal can be emitted from any ~QObject~ objects or its ~subclasses~, which
will then trigger any slot functions of any objects that are connected to the signal.

Compared to callbacks (which Qt 5 also support), the signals and slots mechanism is
comparably more fluid and flexible for the programmer to use. The signals and slots
mechanism is both type safe and not strongly coupled to the processing function, which
makes it better than the callback's implementation.

By right-clicking on a widget box, and choosing *Go to slot*, you should be seeing a list
like this:

#+DOWNLOADED: screenshot @ 2022-04-14 01:32:44
[[file:Event_Handling/2022-04-14_01-32-44_screenshot.png]]

You will see a list of built-in slot functions available for the push button. Let's
select the ~clicked()~ option and press OK. A slot function
called ~on_pushButton_clicked()~ will now appear in both ~mainwindow.h~ and
~mainwindow.cpp~. Qt Creator automatically added the slot function to your
source code after you pressed the OK button on the Go to slot window. If you
check out your ~mainwindow.h~ now, you should be able to see an extra function
under the private slots keyword:

#+begin_src cpp
class MainWindow : public QMainWindow {
    Q_OBJECT
public:
    explicit MainWindow(QWidget *parent = 0);
    ~MainWindow();
private slots:
    void on_pushButton_clicked();
private:
    Ui::MainWindow *ui;
};
#+end_src

The same goes for ~mainwindow.cpp~, where the ~on_pushButton_clicked()~
function has been added for you:

#+begin_src cpp
void MainWindow::on_pushButton_clicked() {
}
#+end_src

Now, let's add a ~QMessageBox~ header to the top of your source file:

#+begin_src cpp
#include <QMessageBox>
#+end_src

Then, add the following code within the on_pushButton_clicked() function:

#+begin_src cpp
void MainWindow::on_pushButton_clicked()
{
    QMessageBox::information(this, "Hello", "clicked?");
}
#+end_src

Now build:

[[file:Event_Handling/2022-04-14_05-14-01_screenshot.png]]
** Signals & Slots
Signals and slots are used for communication between objects. The signals and slots
mechanism is a central feature of Qt and probably the part that differs most from the
features provided by other frameworks. Signals and slots are made possible by Qt's
meta-object system.

In GUI programming, when we change one widget, we often want another widget to be notified.
More generally, we want objects of any kind to be able to communicate with one another. For
example, if a user clicks a Close button, we probably want the window's ~close()~ function to
be called.

Other toolkits achieve this kind of communication using callbacks. A callback is a pointer
to a function, so if you want a processing function to notify you about some event you pass
a pointer to another function (the callback) to the processing function. The processing
function then calls the callback when appropriate. While successful frameworks using this
method do exist, callbacks can be unintuitive and may suffer from problems in ensuring the
type-correctness of callback arguments.

In Qt, we have an alternative to the callback technique: We use signals and slots. A signal
is emitted when a particular event occurs. Qt's widgets have many predefined signals, but we
can always subclass widgets to add our own signals to them. A slot is a function that is
called in response to a particular signal. Qt's widgets have many pre-defined slots, but it
is common practice to subclass widgets and add your own slots so that you can handle the
signals that you are interested in.


[[file:Event_Handling/2022-04-14_06-22-04_screenshot.png]]

The signals and slots mechanism is type safe: The signature of a signal must match the
signature of the receiving slot. (In fact a slot may have a shorter signature than the
signal it receives because it can ignore extra arguments.) Since the signatures are
compatible, the compiler can help us detect type mismatches when using the function
pointer-based syntax. The string-based SIGNAL and SLOT syntax will detect type mismatches at
runtime. Signals and slots are loosely coupled: A class which emits a signal neither knows
nor cares which slots receive the signal. Qt's signals and slots mechanism ensures that if
you connect a signal to a slot, the slot will be called with the signal's parameters at the
right time. Signals and slots can take any number of arguments of any type. They are
completely type safe.

All classes that inherit from QObject or one of its subclasses (e.g., QWidget) can contain
signals and slots. Signals are emitted by objects when they change their state in a way that
may be interesting to other objects. This is all the object does to communicate. It does not
know or care whether anything is receiving the signals it emits. This is true information
encapsulation, and ensures that the object can be used as a software component.

*Example:*

#+begin_src cpp
#include <QObject>

class Counter : public QObject
{
    Q_OBJECT

public:
    Counter() { m_value = 0; }

    int value() const { return m_value; }

public slots:
    void setValue(int value);

signals:
    void valueChanged(int newValue);

private:
    int m_value;
};
#+end_src

The ~QObject-based~ version has the same internal state, and provides public methods to access
the state, but in addition it has support for component programming using signals and slots.
This class can tell the outside world that its state has changed by emitting a signal,
~valueChanged()~, and it has a slot which other objects can send signals to.

All classes that contain signals or slots must mention ~Q_OBJECT~ at the top of their
declaration. They must also derive (directly or indirectly) from ~QObject~.

Slots are implemented by the application programmer. Here is a possible implementation of
the ~Counter::setValue() slot~:

#+begin_src cpp
void Counter::setValue(int value)
{
    if (value != m_value) {
        m_value = value;
        emit valueChanged(value);
    }
}
#+end_src

The emit line emits the signal ~valueChanged()~ from the object, with the new value as
argument.

In the following code snippet, we create two Counter objects and connect the first object's
~valueChanged()~ signal to the second object's ~setValue()~ slot using ~QObject::connect()~:

#+begin_src cpp
    Counter a, b;
    QObject::connect(&a, &Counter::valueChanged,
                     &b, &Counter::setValue);

    a.setValue(12);     // a.value() == 12, b.value() == 12
    b.setValue(48);     // a.value() == 12, b.value() == 48
#+end_src
** Working with Signals and Slots

GUI toolkits usually provide a means to react to things that occur within an application.
Nothing is left to chance. Every tick that happens within the application is registered and
taken note of. For example, when you move a window or resize it, the action gets
registered, and provided ample code has been written, it will be executed as a reaction to
the moving or resizing of the window. For every action that occurs, a number of outcomes
may happen. Essentially, the questions we want to answer are as follows: what do we do
when a particular action or event has occurred? How do we handle it?

One way to implement the ability to react to an action that has occurred is by using the
design pattern called the *Observer Pattern*.

In the Observer Pattern design, an observable object communicates its state change to other
objects that are observing it. For instance, any time an object (A) wants to be notified of a
state change of some other object (B), it first has to identify that object (B) and register itself
as one of the objects that should receive such notification of the state change. Sometime in
the future, when the state of an object (B) occurs, object (B) will go through a list of objects it
keeps that want to be informed regarding the state change. This will, at this point, include
object (A):

[[file:Event_Handling/2022-04-15_08-12-39_screenshot.png]]

From the preceding diagram, the Subject circle is termed the observable object, while the
circles in the bounded box are the observers. They are being notified of the state change of
the Subject as its count variable is increased from 1 to 5.

Some events or actions that may occur within our application that we will be interested in
and would want to react to include the following:

- A window being resized
- A button clicked
- Pressing the return key
- A widget being dragged
- A mouse hovering over the widget


*A signal is a message that is passed to communicate that the state of an object has changed.*
This signal may carry information about the change that has occurred. For instance, when a
window has been resized, the signal will usually carry the coordinates of the new state (or
size) of the window. Sometimes, a signal may carry no extra information, such as that of a
button click.


A slot is a specific function of an object that is called whenever a certain signal has been
emitted. Since slots are functions, they will embody lines of code that perform an action,
such as closing a window, disabling a button, and sending an email, to mention but a few.

Signals and slots have to be connected (in code). Without writing code to connect a signal
and a slot, they will exist as independent entities.

Most of the widgets in Qt come with a number of signals and slots. However, it is possible
to write your own signals and slots too. So what do a signal and a slot look like? Consider
the following code listing:

#+begin_src cpp
#include <QApplication>
#include <QPushButton>
int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QPushButton *quitButton = new QPushButton("Quit");
    QObject::connect(quitButton, SIGNAL(clicked()), &app, SLOT(quit()));
    quitButton->show();
    return app.exec();
}
#+end_src


Compile and run the application.

An instance of ~QPushButton~ is created, ~quitButton~. The ~quitButton~ instance here is the
observable object. Anytime this button is clicked, the ~clicked()~ signal will be emitted.
The ~clicked()~ signal here is a method belonging to the ~QPushButton~ class that has only
been earmarked as a signal.

The ~quit()~ method of the app object is called, which terminates the event loop.
To specify what should happen when ~quitButton~ has been clicked, we pass app and say
that the ~quit()~ method on the app object should be called. These four parameters are
connected by the static function, ~connect()~, of the ~QObject~ class.
The general format is ~(objectA, signals (methodOnObjectA()), objectB, slots (methodOnObjectB()))~.

The second and final parameters are the signatures of the methods representing the signals
and the slots. The first and third parameters are pointers and should contain the address to
objects. Since ~quitButton~ is already a pointer, we simply pass it as it is. On the other
hand, &app would return the address of app.


The example we have just illustrated is quite primitive. Let's write an application where a
change in the state of one widget is passed to another widget. Not only will the signal be
connected to a slot, but data will be carried along:

#+begin_src cpp
#include <QApplication>
#include <QVBoxLayout>
#include <QLabel>
#include <QDial>
int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QWidget *window = new QWidget;
    QVBoxLayout *layout = new QVBoxLayout;
    QLabel *volumeLabel = new QLabel("0");
    QDial *volumeDial= new QDial;
    layout->addWidget(volumeDial);
    layout->addWidget(volumeLabel);
    QObject::connect(volumeDial, SIGNAL(valueChanged(int)), volumeLabel,
                     SLOT(setNum(int)));
    window->setLayout(layout);
    window->show();
    return app.exec();
}
#+end_src


This is yet another simple program that illustrates how data is passed between the signal
and slot. An instance of ~QVBoxLayout~ is created, layout. A ~QLabel~ instance, ~volumeLabel~, is
created and will be used to display changes that occur. It is initialized with the string 0.
Next, an instance of QDial is created with ~QDial *volumeDial = new QDial.~ The QDial widget
is a knob-like looking widget that is graduated with a minimum and maximum range of numbers.
With the aid of a mouse, the knob can be turned, just like you would turn up the volume on a
speaker or radio.
