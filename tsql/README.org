#+TITLE: T/SQL Cookbook
#+DATE:  <2022-08-03>

#+BEGIN_PREVIEW
T/SQL mini-cookbook, with SQL Server exclusive notes
#+END_PREVIEW

* Basic Data Types
Expect the common SQL data types to exist within T-SQL, commonly used types: (Note that max
value is the positive signal of min value)
| Type         | Min value                  |
|--------------+----------------------------|
| ~bigint~     | -9,223,372,036,854,775,808 |
| ~int~        | C's ~INT_MIN~              |
| ~smallint~   | -32,768                    |
| ~tinyint~    | 0 to 255                   |
| ~bit~        | 0 to 1                     |
| ~decimal~    | $-10^{38} +1$              |
| ~numeric~    | $-10^{38} +1$              |
| ~money~      | -922,337,203,685,477.5808  |
| ~smallmoney~ | -214,748.3648              |

** Character Strings
| Type            | Description                                                                        |
|-----------------+------------------------------------------------------------------------------------|
| ~char~          | Fixed-length non-Unicode character data with a maximum length of 8,000 characters. |
| ~varchar~       | Variable-length non-Unicode data with a maximum of 8,000 characters.               |
| ~Varchar (max)~ | Variable-length non-Unicode data with a maximum length of 231 characters.          |
| ~text~          | Variable-length non-Unicode data with a maximum length of 2,147,483,647 characters |

Those are the most commonly used data types, some dumb-asses uses things like
~varbinary(max)~ and ~image~ to store images, this is redundancy as fuck, do not do it.


* Basic Operations
#+begin_src sql
CREATE TABLE CUSTOMERS(
   ID   INT              NOT NULL,
   NAME VARCHAR (20)     NOT NULL,
   AGE  INT              NOT NULL,
   ADDRESS  CHAR (25) ,
   SALARY   DECIMAL (18, 2),
   PRIMARY KEY (ID));
#+end_src

#+RESULTS:
: Executed


#+begin_src sql
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (2, 'Khilan', 25, 'Delhi', 1500.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (3, 'kaushik', 23, 'Kota', 2000.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (4, 'Chaitali', 25, 'Mumbai', 6500.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (5, 'Hardik', 27, 'Bhopal', 8500.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (6, 'Komal', 22, 'MP', 4500.00 );
#+end_src

#+RESULTS:
: Records affected: 1
: Records affected: 1
: Records affected: 1
: Records affected: 1
: Records affected: 1
: Records affected: 1


#+begin_src sql
UPDATE CUSTOMERS
SET ADDRESS = 'Pune'
WHERE ID = 6;
#+end_src

#+RESULTS:
: Records affected: 1

#+begin_src sql
SELECT *
         FROM CUSTOMERS;
#+end_src

#+RESULTS:
: | id | name     | age | address                   | salary  |
: |----+----------+-----+---------------------------+---------|
: | 1  | Ramesh   | 32  | Ahmedabad                 | 2000.00 |
: | 2  | Khilan   | 25  | Delhi                     | 1500.00 |
: | 3  | kaushik  | 23  | Kota                      | 2000.00 |
: | 4  | Chaitali | 25  | Mumbai                    | 6500.00 |
: | 5  | Hardik   | 27  | Bhopal                    | 8500.00 |
: | 6  | Komal    | 22  | Pune                      | 4500.00 |


If you want to modify all ADDRESS and SALARY column values in CUSTOMERS table, you do not
need to use WHERE clause. UPDATE query would be as follows −



#+begin_src sql
UPDATE CUSTOMERS
SET ADDRESS = 'Pune', SALARY = 1000.00;
#+end_src

#+RESULTS:
: Records affected: 6


#+begin_src sql
SELECT *
         FROM CUSTOMERS;
#+end_src

#+RESULTS:
: | id | name     | age | address                   | salary  |
: |----+----------+-----+---------------------------+---------|
: | 1  | Ramesh   | 32  | Pune                      | 1000.00 |
: | 2  | Khilan   | 25  | Pune                      | 1000.00 |
: | 3  | kaushik  | 23  | Pune                      | 1000.00 |
: | 4  | Chaitali | 25  | Pune                      | 1000.00 |
: | 5  | Hardik   | 27  | Pune                      | 1000.00 |
: | 6  | Komal    | 22  | Pune                      | 1000.00 |

** DELETE, WHERE
Same as regular SQL, check [[file:psql.org][psql cookbook]]

** Like
The MS SQL Server LIKE clause is used to compare a value to similar values using wildcard
operators. There are two wildcards used in conjunction with the LIKE operator −

#+begin_src sql
SELECT * FROM CUSTOMERS
WHERE SALARY LIKE '100%';
#+end_src

#+RESULTS:
: | id | name     | age | address                   | salary  |
: |----+----------+-----+---------------------------+---------|
: | 1  | Ramesh   | 32  | Pune                      | 1000.00 |
: | 2  | Khilan   | 25  | Pune                      | 1000.00 |
: | 3  | kaushik  | 23  | Pune                      | 1000.00 |
: | 4  | Chaitali | 25  | Pune                      | 1000.00 |
: | 5  | Hardik   | 27  | Pune                      | 1000.00 |
: | 6  | Komal    | 22  | Pune                      | 1000.00 |
** Order
The MS SQL Server ORDER BY clause is used to sort the data in ascending or descending order,
based on one or more columns. Some database sort query results in ascending order by
default.

#+begin_src sql
SELECT * FROM CUSTOMERS
   ORDER BY NAME, SALARY
#+end_src

#+RESULTS:
: | id | name     | age | address                   | salary  |
: |----+----------+-----+---------------------------+---------|
: | 4  | Chaitali | 25  | Pune                      | 1000.00 |
: | 5  | Hardik   | 27  | Pune                      | 1000.00 |
: | 3  | kaushik  | 23  | Pune                      | 1000.00 |
: | 2  | Khilan   | 25  | Pune                      | 1000.00 |
: | 6  | Komal    | 22  | Pune                      | 1000.00 |
: | 1  | Ramesh   | 32  | Pune                      | 1000.00 |
** Group by

The SQL Server GROUP BY clause is used in collaboration with the SELECT statement to arrange
identical data into groups.

The GROUP BY clause follows the WHERE clause in a SELECT statement and precedes the ORDER BY
clause.


#+begin_src sql
SELECT NAME, SUM(SALARY) as [sum of salary] FROM CUSTOMERS
   GROUP BY NAME;
#+end_src

#+RESULTS:
: | name     | sum of salary |
: |----------+---------------|
: | Chaitali | 1000.00       |
: | Hardik   | 1000.00       |
: | kaushik  | 1000.00       |
: | Khilan   | 1000.00       |
: | Komal    | 1000.00       |
: | Ramesh   | 1000.00       |
