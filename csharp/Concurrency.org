#+title: Concurrency in C#
#+date: <2022-01-09>
#+hugo_tags: "Computer Science" ".NET"


#+BEGIN_PREVIEW
The following text is based on /Concurrency in C# Cookbook: Asynchronous, Parallel, and
Multithreaded Programming/ by Stephen Cleary
#+END_PREVIEW


* Introduction
Before Starting, I’d like to clear up some terminology that I’ll be using throughout
this book. Let’s start with concurrency.


#+begin_quote
*Concurrency*: Doing more than one thing at a time.
#+end_quote

I hope it’s obvious how concurrency is helpful. End-user applications use concurrency
to respond to user input while writing to a database. Server applications use concurrency
to respond to a second request while finishing the first request. You need concurrency
any time you need an application to do one thing while it’s working on something else.
Almost every software application in the world can benefit from concurrency.

Most developers hearing the term “concurrency” immediately think of “multithreading.” I’d
like to draw a distinction between these two.

#+begin_quote
*Multithreading*: A form of concurrency that uses multiple threads of execution.
#+end_quote


Multithreading literally refers to using multiple threads. Multithreading is one form of
concurrency, but certainly not the only one. In fact, direct use of the low-level threading
types has almost no purpose in a modern application; higher-level abstractions are more
powerful and more efficient than old- school multithreading.

#+begin_quote
*Parallel Processing*: Doing lots of work by dividing it up among multiple threads that run
concurrently.
#+end_quote

Parallel processing (or parallel programming) uses multithreading to maximize the use
of multiple processors. Modern CPUs have multiple cores, and if there’s a lot of work
to do, then it makes no sense to just make one core do all the work while the others sit
idle. Parallel processing will split up the work among multiple threads, which can each
run independently on a different core.


#+begin_quote
*Asynchronous Programming*
A form of concurrency that uses futures or callbacks to avoid unnecessary threads.
#+end_quote


A future (or promise) is a type that represents some operation that will complete in the
future. The modern future types in .NET are Task and Task<TResult>. Older asyn‐
chronous APIs use callbacks or events instead of futures. Asynchronous programming
is centered around the idea of an asynchronous operation: some operation that is started
that will complete some time later. While the operation is in progress, it does not block
the original thread; the thread that starts the operation is free to do other work. When
the operation completes, it notifies its future or invokes its completion callback event
to let the application know the operation is finished.

Another form of concurrency is reactive programming. Asynchronous programming implies that
the application will start an operation that will complete once at a later time. Reactive
programming is closely related to asynchronous programming, but is built on asynchronous
events instead of asynchronous operations. Asynchronous events may not have an actual
“start,” may happen at any time, and may be raised multiple times.

#+begin_quote
*Reactive Programming*: A declarative style of programming where the application reacts to
events.
#+end_quote

If you consider an application to be a /massive state machine,/ the application’s behavior
can be described as reacting to a series of events by updating its state at each event. This
is not as abstract or theoretical as it sounds; modern frameworks make this approach
quite useful in real-world applications. Reactive programming is not necessarily con
current, but it is closely related to concurrency.
book.
** Asyncronous Programming
Asynchronous programming has two primary benefits. The first benefit is for end-user GUI
programs: asynchronous programming enables responsiveness. We’ve all used a program that
temporarily locks up while it’s working; an asynchronous program can remain responsive to
user input while it’s working. The second benefit is for server-side programs: asynchronous
programming enables scalability. A server application can scale somewhat just by using the
thread pool, but an asynchronous server application can usually scale an order of magnitude
better than that.

Modern asynchronous .NET applications use two keywords: ~async~ and ~await~. The async keyword
is added to a method declaration, and its primary purpose is to enable the await keyword
within that method (the keywords were introduced as a pair for backward-compatibility
reasons). An async method should return ~Task<T>~ if it returns a value, or ~Task~ if it does
not return a value. These task types represent futures; they notify the calling code when
the async method completes.

*Note*: Avoid ~async void~! It is possible to have an ~async~ method return
void, but you should only do this if you’re writing an async event
handler. A regular async method without a return value should
return ~Task~, not ~void~.


With that background, let’s take a quick look at an example:

#+begin_src csharp
async Task DoSomethingAsync()
{
  int val = 13;
  // Asynchronously wait 1 second.
  await Task.Delay(TimeSpan.FromSeconds(1));
  val *= 2;
  // Asynchronously wait 1 second.
  await Task.Delay(TimeSpan.FromSeconds(1));
  Trace.WriteLine(val);
}
#+end_src

The await keyword is not limited to working with tasks; it can work with any kind of
awaitable that follows a certain pattern. As one example, the Windows Runtime API
defines its own interfaces for asynchronous operations. These are not convertible to
Task, but they do follow the awaitable pattern, so you can directly await them. These
awaitables are more common in Windows Store applications, but most of the time await
will take a Task or ~Task<T>~.

Error handling is natural with async and await. In the following code snippet, Possi
bleExceptionAsync may throw a NotSupportedException, but TrySomethingAsync
can catch the exception naturally. The caught exception has its stack trace properly
preserved and is not artificailly wrapped in a TargetInvocationException or Aggre
gateException:

#+begin_src csharp
async Task TrySomethingAsync()
{
  try
  {
    await PossibleExceptionAsync();
  }
  catch (NotSupportedException ex)
  {
    LogException(ex);
    throw;
    }
  }
#+end_src

* Async: Problems & Solutions
*Problems*

You need to (asynchronously) wait for a period of time. This can be useful when unit
testing or implementing retry delays. This solution can also be useful for simple time‐

*Solution*

The Task type has a static method Delay that returns a task that completes after the
specified time
