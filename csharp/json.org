#+TITLE: JSON in C# Using Json.NET
#+hugo_tags: "Computer Science" ".NET"

One of the most popular .NET libraries for working with the JSON serialization
format is Newtonsoft.Json, known as Json.NET. It is mature and powerful.

* Introduction

Let's start by defining what JSON is. JSON stands for JavaScript Object Notation.  It is a
data interchange format that is used to transmit and store serialized information.  One
example can be from a web page to a server, or to store data in a large object repository.
The beauty is that it's an open standard, and it is human readable text. JSON's design goals
were for it to be minimal, portable, textual, and a subset of JavaScript.  And this is an
example of JSON.  As you can see, you have a key value pairs, you can have arrays, dates, it
supports Booleans, nulls, and nested objects.


JSON, the JavaScript Object Notation, was created by Douglas Crockford in 2001.  The
official site is json.org. Visit it for more details on this data interchange format.  It
goes straight to the point in explaining JSON, and as you can see at the top, it mentions
one of the standards that describes JSON, which in fact is described by two standards. One
is RFC 8259, which covers the specification, semantics, and security considerations.  It was
not the first one. You can also check RFC 7159, 7158, and 4627 for a bigger look at the
history. And then, ECMA‑404, which is the minimal specification. It covers the allowed
grammar syntax.  And now, let's talk about Json.NET.  It was started by James Newton‑King in
2005 out of the need of working with JSON in projects that had JavaScript, AJAX, and .NET.
It started as a couple of static methods for escaping strings, but it evolved and it was
first released as Json.NET in 2006 with an unimaginable amount of hours of work. So a big
thank you to him.  It is used by thousands of projects, so much so that it's the most
downloaded library in NuGet's history.  In 2018, Json.NET joined the .NET Foundation.  It
was originally hosted in CodePlex, but now, as most open source projects, it is in GitHub.
James works for Microsoft by day, and he says he's not Batman.


Why is JSON important?  Given that it was originally based on a subset of JavaScript, and
considering how important JavaScript currently is, one of the best parts is that JSON is
supported natively by JavaScript. However, and this is pretty good as well, it is language
independent, but uses conventions that are familiar to programmers of the C family of
languages, including C, C++, Java, Perl, Python, and many others.  This makes JSON a great
option for other things like storing data, which is why it also has been adopted for all
types of storage platforms, including NoSQL databases and search engines, to name a few.
JSON also has the concept of types.  It is worth noting that it supports some un‑escaped
characters that are not allowed in JavaScript.  But in general, JSON is supported by the
major languages, like Ruby, Objective‑C, Java, C#, Python, and so on and so forth.
Something else that's quite notable is that developers want out of the syntax business.
With XML, you can represent the same data in multiple different ways.  There are some
differences in the metadata. This can lead to confusion or errors.  XML can get tiring to
read and understand.  I do agree that this complexity comes with some advantages in terms of
flexibility; however, the question is how much flexibility?  It all depends.  But in
general, JSON covers the wide majority of cases. And it goes so far that Douglas Crockford,
the creator of JSON, as we recently found out, called it the fat‑free alternative to XML.
And I think he's right.  Which takes me to my next point.  Many applications expose an API,
which in many cases followed the REST architectural style.  And even though these APIs
support different formats besides JSON, like XML, JSON's readability and the fact that it is
quite lightweight make JSON very suitable and one of the preferred formats for data
exchange, which is why JSON is used in a large number of APIs.
** Json Specification

JSON is a text format for the serialization of structured data as a collection of name‑value
pairs.  JSON can represent four primitive types, which are strings, numbers, Booleans, and
null.  Also, there are two structured types, objects and arrays.  Regarding duplicate keys,
ECMA‑404 has no mention of unique keys.  You can have two authors with the same name.  But
RFC 8259 states that names within an object should be unique, which helps for all
implementations to agree on name‑value mappings. When no duplicates are present, Json.NET
takes the last value.

A number is a decimal number with a fractional part and may use an exponential annotation.
JSON does not allow Not a Number, or NaN, nor does it make any distinction between integer
and floating point. Even though JavaScript uses double‑precision floating point format for
all of its numeric values, other languages implementing JSON may encode numbers
differently.  String is a sequence of zero or more unicode characters.  Strings are
delimited with double quotation marks and support a backslash escaping syntax. Boolean can
be either the values true or false. Array is a list of zero or more values in which you use
square bracket notation with elements being comma separated.  An object is an unordered
collection of name‑value pairs where the names, also called keys, are strings.  Objects are
delimited with curly brackets and use commas to separate each pair, while within each pair,
a colon separates the key or name from its value.  ECMA 404 states that most program
languages will have some feature for representing such collections, which can go by names
like record, str, dict, map, hash, object, or class.  Null is an empty value using the word
null. And whitespace is ignored outside of the values.  JSON generally ignores any
whitespace around or between syntactic elements, values and punctuation, but not within a
string.  However, JSON only recognizes four specific whitespace characters, the space, the
center tab, line feed, and carriage return.  JSON does not provide or allow any sort of
comment syntax.
* Serialization & Deserialization
** Basic Serialization
Serialization and deserialization involve taking a data structure or object and converting
it back and forth between JSON text and .NET objects. A .NET object, when serialized,can be
stored as a stream of bytes, a file, or in‑memory,and later it can be used to recreate the
original object. You have to be careful,though, in some cases there are private
implementation details,so you need to review the recreated object to determine if there's
any information that's missing.

In the serialization and deserialization process, you map property names and copy their
values using the main JsonSerializer class with the support of JsonReader and JsonWriter.

The JsonSerializer class is a straightforward way of converting between JSON text and .NET
objects. It provides a great deal of control and customization,being able to read and write
directly to streams via JsonTextReader and JsonTextWriter. Simply use the serialize and
deserialize methods. And it gets even better, Json.NET comes with a very easy‑to‑use wrapper
over JsonSerializer called JsonConvert that makes the serialization process that easy for
most scenarios. Simply use the SerializeObject and DeserializeObject methods. You control
the serialization and deserialization process via settings and attributes, which will be
covered in the next module. But first, let's see JsonConvert in action.

After adding [[https://www.nuget.org/packages/Newtonsoft.Json][Newtonsoft.Json]] to your project, you are ready to use it directly:
#+begin_src csharp
using Newtonsoft.Json;
#+end_src

#+begin_src csharp
string json = Generate.SingleJson();
#+end_src

The ~Generate.SingleJson()~ is a method inside the ~Generate~ static class, you can check it
out in the source code of the repository, however, all it does that it returns the ~json~
file needed for this demonstration:
#+begin_src csharp
public static string SingleJson()
{
    return File.ReadAllText("AuthorSingle.json");
}
#+end_src

The ~AuthorSingle.json~ is so simple:
#+begin_src json
{
  "name": "Xavier Morera",
  "courses": [
    "Solr",
    "Spark",
    "Python",
    "T-SQL"
  ],
  "since": "2014-01-14T00:00:00",
  "happy": true,
  "issues": null,
  "car": {
    "model": "Land Rover Series III",
    "year": 1976
  },
  "authorRelationship": 1
}
#+end_src
A very vital mission in using ~JSON~ in ~C#~, is to write the corresponding class for it in
~C#~, it's called ~POCO~ which stands for /Plain old CLR object/, in this case, I'm going to
give it the ~JsonObject~ attribute.
#+begin_src csharp
    [JsonObject(IsReference = true)]
    public class Author
    {
        public string name { get; set; }
        public string[] courses { get; set; }
        public DateTime since { get; set; }
        public bool happy { get; set; }
        public object issues { get; set; }
        public Car car { get; set; }
        public List<Author> favoriteAuthors { get; set; }
        public AuthorRelationship authorRelationship { get; set; }
    }
#+end_src
The ~Car~ and ~AuthorRelationship~ Classes doesn't contain any attribute:
#+begin_src csharp
    public enum AuthorRelationship
    {
        EmployeeAuthor,
        IndependentAuthor
    }
    public class Car
    {
        public string model { get; set; }
        public int year { get; set; }
    }
#+end_src
Back to ~string json~, it should contain the Json text file, let's check it:
#+begin_src csharp
Console.WriteLine(json);
#+end_src

#+RESULTS:
: {
:   "name": "Xavier Morera",
:   "courses": [
:     "Solr",
:     "Spark",
:     "Python",
:     "T-SQL"
:   ],
:   "since": "2014-01-14T00:00:00",
:   "happy": true,
:   "issues": null,
:   "car": {
:     "model": "Land Rover Series III",
:     "year": 1976
:   },
:   "authorRelationship": 1
: }

Now let's try to run our first deserialize, the method ~DeserializeObject()~ is inside the
~JsonConvert~ class, which is one of the most useful classes of Json.NET as it helps
serialize and deserialize in a very easy way.

#+begin_src csharp
Author x = JsonConvert.DeserializeObject<Author>(json);
Console.WriteLine(x.name);
#+end_src
#+RESULTS:
:  Xavier Morera

Reversing it is so much easier:
#+begin_src csharp
string y = JsonConvert.SerializeObject(x);
Console.WriteLine(y);
#+end_src
#+RESULTS:
: {"$id":"1","name":"Xavier Morera","courses":["Solr","Spark","Python","T-SQL"],"since":"2014-01-14T00:00:00","happy":true,"issues":null,"car":{"model":"Land Rover Series III","year":1976},"favoriteAuthors":null,"authorRelationship":1}

You may notice that it isn't very well fromated, well, fix it! Just add the
~Formatting.Indented~ parameter in calling:
#+begin_src csharp
string y = JsonConvert.SerializeObject(x, Formatting.Indented);
Console.WriteLine(y);
#+end_src
#+RESULTS:
: {
:   "$id": "1",
:   "name": "Xavier Morera",
:   "courses": [
:     "Solr",
:     "Spark",
:     "Python",
:     "T-SQL"
:   ],
:   "since": "2014-01-14T00:00:00",
:   "happy": true,
:   "issues": null,
:   "car": {
:     "model": "Land Rover Series III",
:     "year": 1976
:   },
:   "favoriteAuthors": null,
:   "authorRelationship": 1
: }
Just like magic!

** ~PreserveReferencesHandling~

These settings can best be explained by example. Let's say that we want to represent a
hierarchy of employees in a company. So we make a simple class like this:


#+begin_src csharp
class Employee
{
    public string Name { get; set; }
    public List<Employee> Subordinates { get; set; }
}
#+end_src

This is a small company with only three employees so far: Angela, Bob and Charles. Angela is
the boss, while Bob and Charles are her subordinates. Let's set up the data to describe this
relationship:

#+begin_src csharp
Employee angela = new Employee { Name = "Angela Anderson" };
Employee bob = new Employee { Name = "Bob Brown" };
Employee charles = new Employee { Name = "Charles Cooper" };
angela.Subordinates = new List<Employee> { bob, charles };
List<Employee> employees = new List<Employee> { angela, bob, charles };
#+end_src

If we serialize the list of employees to JSON:
#+begin_src csharp
string json = JsonConvert.SerializeObject(employees, Formatting.Indented);
Console.WriteLine(json);
#+end_src

We get:
#+begin_src csharp
[
  {
    "Name": "Angela Anderson",
    "Subordinates": [
      {
        "Name": "Bob Brown",
        "Subordinates": null
      },
      {
        "Name": "Charles Cooper",
        "Subordinates": null
      }
    ]
  },
  {
    "Name": "Bob Brown",
    "Subordinates": null
  },
  {
    "Name": "Charles Cooper",
    "Subordinates": null
  }
]
#+end_src

So far so good. You'll notice, however, that the information for Bob and Charles is repeated
in the JSON because the objects representing them are referenced both by the main list of
employees and Angela's list of subordinates. Maybe that's OK for now.

Now suppose we'd also like to have a way to keep track of each Employee's supervisor in
addition to his or her subordinates. So we change our Employee model to add a Supervisor
property...


#+begin_src csharp
class Employee
{
    public string Name { get; set; }
    public Employee Supervisor { get; set; }
    public List<Employee> Subordinates { get; set; }
}
#+end_src

...and add a couple more lines to our setup code to indicate that Charles and Bob report to Angela:

#+begin_src csharp
Employee angela = new Employee { Name = "Angela Anderson" };
Employee bob = new Employee { Name = "Bob Brown" };
Employee charles = new Employee { Name = "Charles Cooper" };

angela.Subordinates = new List<Employee> { bob, charles };
bob.Supervisor = angela;       // added this line
charles.Supervisor = angela;   // added this line

List<Employee> employees = new List<Employee> { angela, bob, charles };
#+end_src

But now we have a bit of a problem. Because the object graph has reference loops in it (e.g.
angela references bob while bob references angela), we will get a JsonSerializationException
when we try to serialize the employees list. One way we can get around this issue is by
setting ReferenceLoopHandling to Ignore like this:

#+begin_src csharp
JsonSerializerSettings settings = new JsonSerializerSettings
{
    ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
    Formatting = Formatting.Indented
};

string json = JsonConvert.SerializeObject(employees, settings);
#+end_src


With this setting in place, we get the following JSON:


#+begin_src json
[
  {
    "Name": "Angela Anderson",
    "Supervisor": null,
    "Subordinates": [
      {
        "Name": "Bob Brown",
        "Subordinates": null
      },
      {
        "Name": "Charles Cooper",
        "Subordinates": null
      }
    ]
  },
  {
    "Name": "Bob Brown",
    "Supervisor": {
      "Name": "Angela Anderson",
      "Supervisor": null,
      "Subordinates": [
        {
          "Name": "Charles Cooper",
          "Subordinates": null
        }
      ]
    },
    "Subordinates": null
  },
  {
    "Name": "Charles Cooper",
    "Supervisor": {
      "Name": "Angela Anderson",
      "Supervisor": null,
      "Subordinates": [
        {
          "Name": "Bob Brown",
          "Subordinates": null
        }
      ]
    },
    "Subordinates": null
  }
]
#+end_src

If you examine the JSON, it should be clear what this setting does: any time the serializer
encounters a reference back to an object it is already in the process of serializing, it
simply skips that member. (This prevents the serializer from getting into an infinite loop.)
You can see that in Angela's list of subordinates in the top part of the JSON, neither Bob
nor Charles show a supervisor. In the bottom part of the JSON, Bob and Charles both show
Angela as their supervisor, but notice her subordinates list at that point does not include
both Bob and Charles.

While it is possible to work with this JSON and maybe even reconstruct the original object
hierarchy from it with some work, it is clearly not optimal. We can eliminate the repeated
information in the JSON while still preserving the object references by using the
PreserveReferencesHandling setting instead:

#+begin_src csharp
JsonSerializerSettings settings = new JsonSerializerSettings
{
    PreserveReferencesHandling = PreserveReferencesHandling.Objects,
    Formatting = Formatting.Indented
};
#+end_src

We get:
#+begin_src json
[
  {
    "$id": "1",
    "Name": "Angela Anderson",
    "Supervisor": null,
    "Subordinates": [
      {
        "$id": "2",
        "Name": "Bob Brown",
        "Supervisor": {
          "$ref": "1"
        },
        "Subordinates": null
      },
      {
        "$id": "3",
        "Name": "Charles Cooper",
        "Supervisor": {
          "$ref": "1"
        },
        "Subordinates": null
      }
    ]
  },
  {
    "$ref": "2"
  },
  {
    "$ref": "3"
  }
]

#+end_src

** Reading and Writing JSON

I showed you how easy it is to convert between JSON text and .NET object using JsonConvert.
I showed you a setting or two, but I didn't go into too many details. JsonConvert is very
straightforward, but is it a one‑size‑fits‑all thing?  The answer is No. If you want
control, you can take it up a notch using the JsonSerializer class, which has two classes
that will be useful for us,the JsonReader and JsonWriter.  JsonReader is, as the name
implies, used for reading JSON. It's non‑cache and forward only.  It's used for large object
and files.  There are different types of readers,the JsonTextReader being the one that we
will cover now.  On the other hand, you have JsonWriter, which is used for creating JSON.
It's also non‑cached, forward only, and allows you to have a lot more control when
generating JSON data. I will also cover now JsonTextWriter.

*** ~JsonSerializer~ Class
You can use JsonSerializer class with a StreamWriter. If you don't know what a StreamWriter
is, it's a class that allows you to write to files.  Create a new StreamWriter and provide
as parameter the name of the file where I intend to write the serialized JSON text. For this
example, I will call it testingjsonfile.json. Next, I instantiate a new JsonSerializer
class, and I call the Serialize function.


#+begin_src csharp
 public static void Main(string[] args)
 {
     using (StreamWriter sw = new StreamWriter("./testingjsonfile.json"))
     {
         string json = Generate.SingleJson();
         JsonSerializer fsz = new JsonSerializer();
         fsz.Serialize(sw, json);
     }
 }
#+end_src

You can use settings like serializer.NullValueHandling=NullValueHandling.Ignore; to ignore
null value. You should be able to find the file in the running directory.

*** ~JsonTextReader~ Class

JsonConvert, and ultimately, the Json Serializer class
used reflection to convert from JSON text to .NET classes. Even though Json.NET is very
fast, by using reflection, it makes it a little bit slower that it can actually beat. And
thus, we have the JsonTextReader, which does not use reflection and provides the fastest way
of reading JSON text.

#+begin_src csharp
JsonTextReader j reader = new JsonTextReader(new StringReader (JsonSample));
#+end_src

I pass a new StringReader with the author JSON. Do you know why a string reader? There is a
very important reason. In .NET, strings are immutable, so if you keep modifying a string
without using a stringbuilder, you will be suffering from a deep performance hit. So always
remember to use it. And then, I start reading data with a jsonReader:


#+begin_src csharp
public static void textreader()
{
    JsonTextReader rdr = new JsonTextReader(new StringReader(smpl));
    while (rdr.Read())
    {
        if (rdr.Value != null)
        {
            Console.WriteLine("Token: " +  rdr.TokenType + " Value: ", rdr.Value);
        } else
            Console.WriteLine("Token: " + rdr.TokenType);
    }
}
#+end_src

A token is just one element of the JSON object. I can check jsonReader. TokenType
to get further information. If I add a QuickWatch, I can see that the first token is the
start object, which makes sense. I will keep reading further and the next token is a
property name.
*** ~JsonTextWriter~ Class
With JsonConvert, you take one class, you make one
call, and you get a JSON text. But what happens if you want to write your JSON text in a
manual way? First of all, why do you want to write it manually? Performance and control.

#+begin_src csharp
StringBuilder sb = new StringBuilder();
StringWriter sw = new StringWriter(sb);

using (JsonWriter writer = new JsonTextWriter(sw))
{
    writer.Formatting = Formatting.Indented;

    writer.WriteStartObject();
    writer.WritePropertyName("CPU");
    writer.WriteValue("Intel");
    writer.WritePropertyName("PSU");
    writer.WriteValue("500W");
    writer.WritePropertyName("Drives");
    writer.WriteStartArray();
    writer.WriteValue("DVD read/writer");
    writer.WriteComment("(broken)");
    writer.WriteValue("500 gigabyte hard drive");
    writer.WriteValue("200 gigabyte hard drive");
    writer.WriteEnd();
    writer.WriteEndObject();
}

Console.WriteLine(sb.ToString());
// {
//   "CPU": "Intel",
//   "PSU": "500W",
//   "Drives": [
//     "DVD read/writer"
//     /*(broken)*/,
//     "500 gigabyte hard drive",
//     "200 gigabyte hard drive"
//   ]
// }

#+end_src

*** Date with JSON

Let's talk about a topic that confuses developers all the time when working with JSON dates.
The thing is, that dates in JSON are tricky mainly because there is no date type, but it's
not JSON's fault. The real reason is that JavaScript does not have a date literal. It's
either represented by a string or a number. The string is just a written representation of
the date, and a number represents milliseconds since January 1 1970, what's known as a Unix
epoch. Json.NET uses the standard ISO 8601, although it used before the Microsoft format.
Let's jump straight into the demo, Dates in JSON with Json.NET. I start by creating a list
of dates. You probably already know this, but in .NET there are several ways of creating a
date.


The default format used by Json.NET is the ISO 8601 standard: ~"2012-03-19T07:22Z"~.

Prior to Json.NET 4.5 dates were written using the Microsoft format:
~"\/Date(1198908717056)\/".~ If you want to use this format, or you want to maintain
compatibility with Microsoft JSON serializers or older versions of Json.NET, then change the
DateFormatHandling setting to MicrosoftDateFormat.

The DateTimeZoneHandling setting can be used to convert a DateTime's DateTimeKind when
serializing. For example set DateTimeZoneHandling to Utc to serialize all DateTimes as UTC
dates. Note that this setting does not effect DateTimeOffsets.

If your dates don't follow the ISO 8601 standard, then the DateFormatString setting can be
used to customize the format of date strings that are read and written using .NET's custom
date and time format syntax.

#+begin_src csharp
public class LogEntry
{
    public string Details { get; set; }
    public DateTime LogDate { get; set; }
}

[Test]
public void WriteJsonDates()
{
    LogEntry entry = new LogEntry
    {
        LogDate = new DateTime(2009, 2, 15, 0, 0, 0, DateTimeKind.Utc),
        Details = "Application started."
    };

    // default as of Json.NET 4.5
    string isoJson = JsonConvert.SerializeObject(entry);
    // {"Details":"Application started.","LogDate":"2009-02-15T00:00:00Z"}

    JsonSerializerSettings microsoftDateFormatSettings = new JsonSerializerSettings
    {
        DateFormatHandling = DateFormatHandling.MicrosoftDateFormat
    };
    string microsoftJson = JsonConvert.SerializeObject(entry, microsoftDateFormatSettings);
    // {"Details":"Application started.","LogDate":"\/Date(1234656000000)\/"}

    string javascriptJson = JsonConvert.SerializeObject(entry, new JavaScriptDateTimeConverter());
    // {"Details":"Application started.","LogDate":new Date(1234656000000)}
}
#+end_src
*** Error Handling
Errors happen all the time, especially with JSON generated by a third party or one that
you're picking up on a log or an API or some storage location. What's really good is that in
Json.NET, you can specify what you want to do with the errors. You can either handle them or
throw them.

First, I will generate this JSON array that contains,
a few dates. But some of these values are not a date. If I ask JSON to
deserialize them into a date, an exception will be raised:


#+begin_src csharp
List<string> errors = new List<string>();

List<DateTime> c = JsonConvert.DeserializeObject<List<DateTime>>(@"[
      '2009-09-09T00:00:00Z',
      'I am not a date and will error!',
      [
        1
      ],
      '1977-02-20T00:00:00Z',
      null,
      '2000-12-01T00:00:00Z'
    ]",
    new JsonSerializerSettings
    {
        Error = delegate(object sender, ErrorEventArgs args)
        {
            errors.Add(args.ErrorContext.Error.Message);
            args.ErrorContext.Handled = true;
        },
        Converters = { new IsoDateTimeConverter() }
    });

// 2009-09-09T00:00:00Z
// 1977-02-20T00:00:00Z
// 2000-12-01T00:00:00Z

// The string was not recognized as a valid DateTime. There is a unknown word starting at index 0.
// Unexpected token parsing date. Expected String, got StartArray.
// Cannot convert null value to System.DateTime.
#+end_src

In this example we are deserializing a JSON array to a collection of DateTimes. On the
JsonSerializerSettings a handler has been assigned to the Error event which will log the
error message and mark the error as handled.

The result of deserializing the JSON is three successfully deserialized dates and three
error messages: one for the badly formatted string ("I am not a date and will error!"), one
for the nested JSON array, and one for the null value since the list doesn't allow nullable
DateTimes. The event handler has logged these messages and Json.NET has continued on
deserializing the JSON because the errors were marked as handled.

One thing to note with error handling in Json.NET is that an unhandled error will bubble up
and raise the event on each of its parents. For example an unhandled error when serializing
a collection of objects will be raised twice, once against the object and then again on the
collection. This will let you handle an error either where it occurred or on one of its
parents.

* Settings & Attributes
** Serialization Settings
JsonSerializer has a number of properties on it to customize how it serializes JSON. These
can also be used with the methods on JsonConvert via the JsonSerializerSettings overloads.
*** ~MissingMemberHandling~
MissingMemberHandling controls how missing members, e.g. JSON contains a property that isn't
a member on the object, are handled during deserialization.

*Ignore:* By default Json.NET ignores JSON if there is no field or property for its value to be set to during deserialization.

*Error*: Json.NET errors when there is a missing member during deserialization.

For demonstration I will comment out a property from the ~author~ class, let it be ~name~:
#+begin_src csharp
public class Author
{
    // public string name { get; set; }
    public string[] courses { get; set; }
    public DateTime since { get; set; }
    public bool happy { get; set; }
    public object issues { get; set; }
    public Car car { get; set; }
    public List<Author> favoriteAuthors { get; set; }
    public AuthorRelationship authorRelationship { get; set; }
}
#+end_src

Now let's try to deserialize a random json file:
#+begin_src csharp
public static void MissingMemebers()
{
    JsonSerializerSettings st = new JsonSerializerSettings();
    st.Formatting = Formatting.Indented;
    Author myar = JsonConvert.DeserializeObject<Author>(smpl, st);
}
#+end_src

This should work by default, to change this behavior, assign ~error~ to 1:
#+begin_src csharp
JsonSerializerSettings st = new JsonSerializerSettings();
st.Formatting = Formatting.Indented;
st.MissingMemberHandling = MissingMemberHandling.Error;
Author myar = JsonConvert.DeserializeObject<Author>(smpl, st);
#+end_src

#+RESULTS:
: Unhandled Exception:
: Newtonsoft.Json.JsonSerializationException: Could not find member 'name' on object of type 'Author'. Path 'name', line 2, position 9.
*** ~ReferenceLoopHandling~

NullValueHandling controls how null values on .NET objects are handled during serialization
and how null values in JSON are handled during deserialization.


*Include:* By default Json.NET writes null values to JSON when serializing and sets null
values to fields/properties when deserializing.

*Ignore:* Json.NET will skip writing JSON properties if the .NET value is null when
 serializing and will skip setting fields/properties if the JSON property is null when
 deserializing.

 #+begin_src csharp
public class Movie
{
    public string Name { get; set; }
    public string Description { get; set; }
    public string Classification { get; set; }
    public string Studio { get; set; }
    public DateTime? ReleaseDate { get; set; }
    public List<string> ReleaseCountries { get; set; }
}
 #+end_src

 #+begin_src csharp
Movie movie = new Movie();
movie.Name = "Bad Boys III";
movie.Description = "It's no Bad Boys";

string included = JsonConvert.SerializeObject(movie,
    Formatting.Indented,
    new JsonSerializerSettings { });

// {
//   "Name": "Bad Boys III",
//   "Description": "It's no Bad Boys",
//   "Classification": null,
//   "Studio": null,
//   "ReleaseDate": null,
//   "ReleaseCountries": null
// }

string ignored = JsonConvert.SerializeObject(movie,
    Formatting.Indented,
    new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });

// {
//   "Name": "Bad Boys III",
//   "Description": "It's no Bad Boys"
// }
 #+end_src

*** ~DefaultValueHandling~
DefaultValueHandling controls how Json.NET uses default values set using the .NET
DefaultValueAttribute when serializing and deserializing.

*Include:* By default Json.NET will write a field/property value to JSON when serializing if
the value is the same as the field/property's default value. The Json.NET deserializer will
continue setting a field/property if the JSON value is the same as the default value.

*Ignore:* Json.NET will skip writing a field/property value to JSON if the value is the same
 as the field/property's default value, or the custom value specified in
 DefaultValueAttribute if the attribute is present. The Json.NET deserializer will skip
 setting a .NET object's field/property if the JSON value is the same as the default value.

 #+begin_src csharp
public class Invoice
{
    public string Company { get; set; }
    public decimal Amount { get; set; }

    // false is default value of bool
    public bool Paid { get; set; }
    // null is default value of nullable
    public DateTime? PaidDate { get; set; }

    // customize default values
    [DefaultValue(30)]
    public int FollowUpDays { get; set; }

    [DefaultValue("")]
    public string FollowUpEmailAddress { get; set; }
}
 #+end_src

 #+begin_src csharp
Invoice invoice = new Invoice
{
    Company = "Acme Ltd.",
    Amount = 50.0m,
    Paid = false,
    FollowUpDays = 30,
    FollowUpEmailAddress = string.Empty,
    PaidDate = null
};

string included = JsonConvert.SerializeObject(invoice,
    Formatting.Indented,
    new JsonSerializerSettings { });

// {
//   "Company": "Acme Ltd.",
//   "Amount": 50.0,
//   "Paid": false,
//   "PaidDate": null,
//   "FollowUpDays": 30,
//   "FollowUpEmailAddress": ""
// }

string ignored = JsonConvert.SerializeObject(invoice,
    Formatting.Indented,
    new JsonSerializerSettings { DefaultValueHandling = DefaultValueHandling.Ignore });

// {
//   "Company": "Acme Ltd.",
//   "Amount": 50.0
// }
 #+end_src


**** TODO Populate
*** ~ObjectCreationHandling~
Specifies how object creation is handled by the JsonSerializer. ObjectCreationHandling
controls how objects are created and deserialized to during deserialization.


*Auto:* By default Json.NET will attempt to set JSON values onto existing objects and add
JSON values to existing collections during deserialization.

*Reuse:* Same behaviour as auto.

*Replace:* Json.NET will always recreate objects and collections before setting values to
them during deserialization.

#+begin_src csharp
public static void CreationHandlier()
{
    JsonSerializerSettings st = new JsonSerializerSettings();
    st.Formatting = Formatting.Indented;
    st.ObjectCreationHandling = ObjectCreationHandling.Replace;
    Author myar = JsonConvert.DeserializeObject<Author>(smpl, st);
    myar = JsonConvert.DeserializeObject<Author>(smpl, st);
    foreach (var myarCourse in myar.courses)
    {
        Console.WriteLine(myarCourse);
    }
}
#+end_src
*** ~TypeNameHandling~
*None:* By default Json.NET does not read or write type names during deserialization.

*Objects:* Json.NET will write and use type names for objects but not collections.

*Arrays:* Json.NET will write and use type names for collections but not objects.

*Auto:* Json.NET will check whether an object/collection matches its declared property and
writes the type name if they do not match, e.g. a property with a type of Mammal has a
derived instance of Dog assigned. Auto will ensure that type information isn't lost when
serializing/deserializing automatically without having to write type names for every object.

*All:* Json.NET will write and use type names for objects and collections.

#+begin_src csharp
public static void TypeNameHandl()
{
    JsonSerializerSettings st = new JsonSerializerSettings();
    st.Formatting = Formatting.Indented;
    st.TypeNameHandling = TypeNameHandling.All;
    Author k = JsonConvert.DeserializeObject<Author>(smpl);
    string i = JsonConvert.SerializeObject(k,st);
    Console.WriteLine(i);
}
#+end_src

*** TODO ~SerializationBinder~
** TODO Serialization Attributes
* See Also
- [[https://www.newtonsoft.com/json/help/html/SerializingJSONFragments.htm][Deserializing Partial JSON Fragments]]
