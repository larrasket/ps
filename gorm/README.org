#+title: GORM: The fantastic ORM library for Golang

* Models

Models are normal structs with basic Go types, pointers/alias of them or custom types
implementing Scanner and Valuer interfaces:

#+begin_src go
type User struct {
  ID           uint
  Name         string
  Email        *string
  Age          uint8
  Birthday     *time.Time
  MemberNumber sql.NullString
  ActivatedAt  sql.NullTime
  CreatedAt    time.Time
  UpdatedAt    time.Time
}
#+end_src


+ *GORM uses ID as primary key*.
+ Pluralize ~struct~ name to ~snake_cases~ as table name.
+ snake_case as column name.
+ ~CreatedAt~, ~UpdatedAt~ to track creating/updating time

  GORM defined a gorm.Model struct, which includes fields ~ID~, ~CreatedAt~, ~UpdatedAt~,
  ~DeletedAt~:

  #+begin_src go
// gorm.Model definition
type Model struct {
  ID        uint           `gorm:"primaryKey"`
  CreatedAt time.Time
  UpdatedAt time.Time
  DeletedAt gorm.DeletedAt `gorm:"index"`
}
  #+end_src


You can embed it into your struct to include those fields, refer Embedded Struct

** Field-Level Permission
Exported fields have all permission when doing ~CRUD~ with GORM, and GORM allows you to change
the field-level permission with tag, so you can make a field to be read-only, write-only,
create-only, update-only or ignored:

#+begin_src go
type User struct {
  Name string `gorm:"<-:create"` // allow read and create
  Name string `gorm:"<-:update"` // allow read and update
  Name string `gorm:"<-"`        // allow read and write (create and update)
  Name string `gorm:"<-:false"`  // allow read, disable write permission
  Name string `gorm:"->"`        // readonly (disable write permission unless it configured)
  Name string `gorm:"->;<-:create"` // allow read and create
  Name string `gorm:"->:false;<-:create"` // createonly (disabled read from db)
  Name string `gorm:"-"`            // ignore this field when write and read with struct
  Name string `gorm:"-:all"`        // ignore this field when write, read and migrate with struct
  Name string `gorm:"-:migration"`  // ignore this field when migrate with struct
}
#+end_src

** Embedded Entities
For anonymous fields, GORM will include its fields into its parent struct, for example:
#+begin_src go
type User struct {
  gorm.Model
  Name string
}
// equals
type User struct {
  ID        uint           `gorm:"primaryKey"`
  CreatedAt time.Time
  UpdatedAt time.Time
  DeletedAt gorm.DeletedAt `gorm:"index"`
  Name string
}
#+end_src

For a normal struct field, you can embed it with the tag ~embedded~, for example:

#+begin_src go
type Author struct {
  Name  string
  Email string
}

type Blog struct {
  ID      int
  Author  Author `gorm:"embedded"`
  Upvotes int32
}
// equals
type Blog struct {
  ID    int64
  Name  string
  Email string
  Upvotes  int32
}
#+end_src



Some of the used fields tags:
| Tag Name        | Description                         |
| ~primaryKey~    | specifies column as primary key     |
| ~unique~        | specifies column as unique          |
| ~default~       | specifies column default value      |
| ~precision~     | specifies column precision[fn:1]    |
| ~scale~         | specifies column scale[fn:2]        |
| ~not null~      | specifies column as NOT NULL        |
| ~autoIncrement~ | specifies column auto incrementable |
| ~embedded~      | embed the field                     |


* Footnotes
[fn:2] Scale is the number of digits to the right of the decimal point in a number.

[fn:1] Precision is the number of digits in a number
