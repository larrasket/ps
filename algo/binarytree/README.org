#+TITLE: Binary Tree Algorithms
#+hugo_tags: "Computer Science"
* Binart Tree Traversal
** DFS
Often we wish to process a binary tree by “visiting” each of its nodes, each time
performing a specific action such as printing the contents of the node. Any process
for visiting all of the nodes in some order is called a traversal. Any traversal that
lists every node in the tree exactly once is called an enumeration of the tree’s
nodes. Some applications do not require that the nodes be visited in any particular
order as long as each node is visited precisely once. For other applications, nodes
must be visited in an order that preserves some relationship. For example, we might
wish to make sure that we visit any given node before we visit its children. This is
called a preorder traversal.

A traversal routine is naturally written as a recursive function. Its input pa-
rameter is a pointer to a node which we will call root because each node can be
viewed as the root of a some subtree. The initial call to the traversal function passes
in a pointer to the root node of the tree. The traversal function visits root and
its children (if any) in the desired order. For example, a preorder traversal speci-
fies that root be visited before its children. This can easily be implemented as
follows.

#+begin_src c++
template <typename E>
void preorder(BinNode<E>* root) {
if (root == NULL) return; // Empty subtree, do nothing
visit(root);
// Perform desired action
preorder(root->left());
preorder(root->right());
#+end_src
Function preorder first checks that the tree is not empty (if it is, then the traversal
is done and preorder simply returns). Otherwise, preorder makes a call to
visit, which processes the root node (i.e., prints the value or performs whatever
computation as required by the application). Function preorder is then called
recursively on the left subtree, which will visit all nodes in that subtree. Finally,
preorder is called on the right subtree, visiting all nodes in the right subtree.
Postorder and inorder traversals are similar. They simply change the order in which
the node and its children are visited, as appropriate.

An important decision in the implementation of any recursive function on trees
is when to check for an empty subtree. Function preorder first checks to see if
the value for root is NULL. If not, it will recursively call itself on the left and right
children of root. In other words, preorder makes no attempt to avoid calling itself on an
empty child. Some programmers use an alternate design in which the
left and right pointers of the current node are checked so that the recursive call is
made only on non-empty children. Such a design typically looks as follows:

#+begin_src c++
template <typename E>
void preorder2(BinNode<E>* root) {
visit(root); // Perform whatever action is desired
if (root->left() != NULL) preorder2(root->left());
if (root->right() != NULL) preorder2(root->right());
#+end_src

At first it might appear that preorder2 is more efficient than preorder,
because it makes only half as many recursive calls. (Why?) On the other hand,
preorder2 must access the left and right child pointers twice as often. The net
result is little or no performance improvement.

In reality, the design of preorder2 is inferior to that of preorder for two
reasons. First, while it is not apparent in this simple example, for more complex
traversals it can become awkward to place the check for the NULL pointer in the
calling code. Even here we had to write two tests for NULL, rather than the one
needed by preorder. The more important concern with preorder2 is that it
tends to be error prone. While preorder2 insures that no recursive calls will
be made on empty subtrees, it will fail if the initial call passes in a NULL pointer.
This would occur if the original tree is empty. To avoid the bug, either preorder2
needs an additional test for a NULL pointer at the beginning (making the subsequent
tests redundant after all), or the caller of preorder2 has a hidden obligation to
pass in a non-empty tree, which is unreliable design. The net result is that many
programmers forget to test for the possibility that the empty tree is being traversed.
By using the first design, which explicitly supports processing of empty subtrees,
the problem is avoided.

Another issue to consider when designing a traversal is how to define the visitor
function that is to be executed on every node. One approach is simply to write a
new version of the traversal for each such visitor function as needed. The disad-
vantage to this is that whatever function does the traversal must have access to the
BinNode class. It is probably better design to permit only the tree class to have
access to the BinNode class.

** BFS
#+begin_src c++
while (q.empty() == false) {
   Node *node = q.front();
   cout << node->data << " ";
   q.pop();
   if (node->left != NULL)
      q.push(node->left);
   if (node->right != NULL)
      q.push(node->right);
}
#+end_src

* Counting

If we wish to count the number of nodes in a binary tree. The
key insight is that the total count for any (non-empty) subtree is one for the
root plus the counts for the left and right subtrees. Where do left and right
subtree counts come from? Calls to function count on the subtrees will
compute this for us. Thus, we can implement count as follows.

#+begin_src c++
template <typename E>
int count(BinNode<E>* root) {
if (root == NULL) return 0; // Nothing to count
return 1 + count(root->left()) + count(root->right());
}
#+end_src
