#+TITLE: Draft Note Book


* Draft

(This draft is made for topics I can't organize, such as miscellaneous algorthims that I
can't track as single categoires. Or for whatever I remember indiscriminately).

** Mergesort
:PROPERTIES:
:CUSTOM_ID: mergesort
:END:

A natural approach to problem solving is divide and conquer. In terms of sorting,
we might consider breaking the list to be sorted into pieces, process the pieces, and
then put them back together somehow. A simple way to do this would be to split
the list in half, sort the halves, and then merge the sorted halves together. This is
the idea behind Mergesort.


The following is an illustration of Mergesort:
[[file:Draft/2022-05-28_05-14-02_screenshot.png]]

Mergesort is one of the simplest sorting algorithms conceptually, and has good
performance both in the asymptotic sense and in empirical running time. Surpris-
ingly, even though it is based on a simple concept, it is relatively difficult to im-
plement in practice. Following is a pseudocode sketch of mergesort:
#+begin_src c
List mergesort(List inlist) {
if (inlist.length() <= 1) return inlist;;
List L1 = half of the items from inlist;
List L2 = other half of the items from inlist;
return merge(mergesort(L1), mergesort(L2));
}
#+end_src

Before discussing how to implement Mergesort, we will first examine the merge function.
Merging two sorted sublists is quite simple. Function ~merge~ examines the first element of
each sublist and picks the smaller value as the smallest element overall. This smaller value
is removed from its sublist and placed into the output list. Merging continues in this way,
comparing the front elements of the sublists and continually appending the smaller to the
output list until no more input elements remain.

Implementing Mergesort presents a number of technical difficulties. The first decision is
how to represent the lists. Mergesort lends itself well to sorting a singly linked list
because merging does not require random access to the list elements.  Thus, Mergesort is the
method of choice when the input is in the form of a linked list. Implementing merge for
linked lists is straightforward, because we need only remove items from the front of the
input lists and append items to the output list.  Breaking the input list into two equal
halves presents some difficulty. Ideally we would just break the lists into front and back
halves. However, even if we know the length of the list in advance, it would still be
necessary to traverse halfway down the linked list *to reach the beginning of the second
half*. A simpler method, which does not rely on knowing the length of the list in advance,
assigns elements of the input list alternating between the two sublists. The first element
is assigned to the first sublist, the second element to the second sublist, the third to
first sublist, the fourth to the second sublist, and so on. This requires one complete pass
through the input list to build the sublists.

When the input to Mergesort is an array, splitting input into two subarrays is easy if we
know the array bounds. Merging is also easy if we merge the subarrays into a second array.
Note that this approach requires twice the amount of space as any of the sorting methods
presented so far, which is a serious disadvantage for Mergesort. It is possible to merge the
subarrays without using a second array, but this is extremely difficult to do efficiently
and is not really practical. Merging the two subarrays into a second array, while simple to
implement, presents another difficulty. The merge process ends with the sorted list in the
auxiliary array. Consider how the recursive nature of Mergesort breaks the original array
into subarrays, as shown in the last illustration Mergesort is recursively called until subarrays of
size 1 have been created, requiring log n levels of recursion. These subarrays are merged
into subarrays of size 2, which are in turn merged into subarrays of size 4, and so on.  We
need to avoid having each merge operation require a new array. With some difficulty, an
algorithm can be devised that alternates between two arrays. A much simpler approach is to
copy the sorted sublists to the auxiliary array first, and then merge them back to the
original array. The following code shows a complete implementation for mergesort following this
approach.

#+begin_src cpp
template <typename E, typename Comp>
void mergesort(E A[], E temp[], int left, int right) {
if (left == right) return;
// List of one element
int mid = (left+right)/2;
mergesort<E,Comp>(A, temp, left, mid);
mergesort<E,Comp>(A, temp, mid+1, right);
for (int i=left; i<=right; i++)
// Copy subarray to temp
temp[i] = A[i];
// Do the merge operation back to A
int i1 = left; int i2 = mid + 1;
for (int curr=left; curr<=right; curr++) {
if (i1 == mid+1)
// Left sublist exhausted
A[curr] = temp[i2++];
else if (i2 > right) // Right sublist exhausted
A[curr] = temp[i1++];
else if (Comp::prior(temp[i1], temp[i2]))
A[curr] = temp[i1++];
else A[curr] = temp[i2++];
}
}
#+end_src

input list alternating between the two sublists. The first element is assigned to the
first sublist, the second element to the second sublist, the third to first sublist, the
fourth to the second sublist, and so on. This requires one complete pass through
the input list to build the sublists.
